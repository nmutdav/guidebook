---
layout: default
title: Processing Media
permalink: /curriculum/th242/pde_mediadesign/
---
<h1>Media Design with Processing IDE</h1>

    <section id="tutorial-1">
        <h2>Tutorial 1: Introduction to Processing IDE for Media Design</h2>
        <p><strong>Objective:</strong> Familiarize yourself with the Processing IDE and basic setup for media design.</p>
        <h3>1. Install Processing IDE</h3>
        <ul>
            <li>Download Processing IDE from <a href="https://processing.org/download/" target="_blank">Processing.org</a>.</li>
            <li>Follow the installation instructions specific to your operating system.</li>
        </ul>
        <h3>2. Create Your First Sketch</h3>
        <pre><code>
void setup() {
    size(800, 600);  // Set the size of the window
    background(255); // Set background color to white
}

void draw() {
    ellipse(mouseX, mouseY, 50, 50); // Draw an ellipse at the mouse position
}
        </code></pre>
    </section>

    <section id="tutorial-2">
        <h2>Tutorial 2: Working with Shapes and Colors</h2>
        <p><strong>Objective:</strong> Learn to create and manipulate shapes and colors in Processing.</p>
        <h3>1. Draw Shapes</h3>
        <pre><code>
void setup() {
    size(800, 600);
    background(200);
}

void draw() {
    fill(random(255), random(255), random(255)); // Random color
    rect(mouseX, mouseY, 100, 100); // Draw a rectangle
    ellipse(width / 2, height / 2, 100, 100); // Draw an ellipse in the center
}
        </code></pre>
        <h3>2. Use Colors</h3>
        <pre><code>
void setup() {
    size(800, 600);
    background(255);
}

void draw() {
    fill(0, 100, 255); // Set fill color
    stroke(255, 0, 0); // Set stroke color
    rect(100, 100, 200, 200);
}
        </code></pre>
    </section>

    <section id="tutorial-3">
        <h2>Tutorial 3: Creating Animations</h2>
        <p><strong>Objective:</strong> Understand basic animation principles and create a simple animation in Processing.</p>
        <h3>1. Basic Animation</h3>
        <pre><code>
float x = 0;

void setup() {
    size(800, 600);
}

void draw() {
    background(255);
    fill(0, 100, 255);
    ellipse(x, height / 2, 50, 50);
    x += 2; // Move the ellipse
    if (x > width) {
        x = 0; // Reset position
    }
}
        </code></pre>
    </section>

    <section id="tutorial-4">
        <h2>Tutorial 4: Interactive Media</h2>
        <p><strong>Objective:</strong> Create interactive media elements that respond to user input.</p>
        <h3>1. Respond to Mouse Input</h3>
        <pre><code>
void setup() {
    size(800, 600);
}

void draw() {
    background(255);
    fill(0);
    ellipse(mouseX, mouseY, 50, 50); // Draw ellipse at mouse position
}
        </code></pre>
        <h3>2. Respond to Keyboard Input</h3>
        <pre><code>
void setup() {
    size(800, 600);
}

void draw() {
    background(255);
    if (keyPressed) {
        fill(255, 0, 0); // Change color when a key is pressed
    } else {
        fill(0);
    }
    ellipse(width / 2, height / 2, 50, 50);
}
        </code></pre>
    </section>

    <section id="tutorial-5">
        <h2>Tutorial 5: Working with Images</h2>
        <p><strong>Objective:</strong> Load and display images in Processing.</p>
        <h3>1. Load and Display an Image</h3>
        <pre><code>
PImage img;

void setup() {
    size(800, 600);
    img = loadImage("your-image.jpg"); // Load an image file
}

void draw() {
    background(255);
    image(img, 0, 0); // Display the image
}
        </code></pre>
        <p>Place your image file in the <strong>data</strong> folder of your Processing sketch.</p>
    </section>

    <section id="tutorial-6">
        <h2>Tutorial 6: Creating a Slideshow</h2>
        <p><strong>Objective:</strong> Develop a basic image slideshow with automatic and manual controls.</p>
        <h3>1. Simple Slideshow</h3>
        <pre><code>
PImage[] images = new PImage[3];
int currentImage = 0;

void setup() {
    size(800, 600);
    images[0] = loadImage("image1.jpg");
    images[1] = loadImage("image2.jpg");
    images[2] = loadImage("image3.jpg");
}

void draw() {
    background(255);
    image(images[currentImage], 0, 0);
}

void keyPressed() {
    if (key == ' ') {
        currentImage = (currentImage + 1) % images.length;
    }
}
        </code></pre>
        <p>Use the <strong>Space</strong> key to switch between images.</p>
    </section>

    <section id="tutorial-7">
        <h2>Tutorial 7: Generative Art</h2>
        <p><strong>Objective:</strong> Create generative art using Processing's drawing functions.</p>
        <h3>1. Generative Art Example</h3>
        <pre><code>
void setup() {
    size(800, 600);
    noLoop(); // Stop draw loop
}

void draw() {
    background(255);
    for (int i = 0; i < width; i += 10) {
        stroke(map(i, 0, width, 0, 255), 0, 255 - map(i, 0, width, 0, 255));
        line(i, 0, i, height);
    }
}
        </code></pre>
    </section>

    <section id="tutorial-8">
        <h2>Tutorial 8: Final Project â€“ Interactive Media Design</h2>
        <p><strong>Objective:</strong> Combine learned techniques to create an interactive media design piece.</p>
        <h3>1. Final Project Requirements</h3>
        <ul>
            <li>Incorporate shapes, colors, animations, and user interaction.</li>
            <li>Utilize images or other media elements.</li>
            <li>Create a cohesive interactive experience.</li>
        </ul>
        <h3>2. Example Code Outline</h3>
        <pre><code>
PImage img;
float x = 0;

void setup() {
    size(800, 600);
    img = loadImage("background.jpg");
}

void draw() {
    background(255);
    image(img, 0, 0);
    fill(0, 100, 255);
    ellipse(x, height / 2, 50, 50);
    x += 2;
    if (x > width) {
        x = 0;
    }
}
        </code></pre>
        <h3>3. Final Project Submission</h3>
        <p>Submit your final project including the Processing code and any media files used.</p>
    </section>
</body>
</html>
